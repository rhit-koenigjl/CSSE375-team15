@startuml ArcadeGame
package presentation {
  class GameViewer {
    - lives: int
    - score: int
    + {static} main(args: String[]): void
  }
  class GameAdvanceListener {
    - {static} {final} NUM_TICKS: int
    + nextTick(): void
  }
  class StartScreen {
    - {static} {final} LEVEL_FILES_LOCATION: String
    - handleStartGame(): void
    - handleDisplayControls(): void
    + draw(): void
  }
  class GameOverScreen {
    - handleQuitGame(): void
    - handleRestartGame(): void
    + draw(): void
  }
  class GameWonScreen {
    - handleQuitGame(): void
    - handleRestartGame(): void
    + draw(): void
  }
  class LevelViewer {
    - level: Level
    - gameObjects: List<Drawable>
    + LevelViewer(level: Level)
    - handleGameWon(): void
    - handleGameLost(): void
    + draw(): void
  }
  abstract Drawable {
    # image: ImageReader
    + draw(): void
    # handleCollision(other: Drawable): void
  }
  class DrawablePlayer {
    + draw(): void
  }
  class DrawableEnemy {
    + draw(): void
  }
  class DrawableBarrier {
    + draw(): void
  }
  class DrawableSpike {
    + draw(): void
  }
  class DrawableBouncePad {
    + draw(): void
  }
  class DrawableCoin {
    + draw(): void
  }
  class DrawableEnemySpawner {
    + draw(): void
  }

  GameViewer .d.> StartScreen
  GameViewer .u.> GameAdvanceListener
  StartScreen -> LevelViewer
  StartScreen .u.> GameAdvanceListener
  LevelViewer .> GameWonScreen
  LevelViewer .> GameOverScreen
  LevelViewer .u.> GameAdvanceListener
  GameWonScreen .u.> GameAdvanceListener
  GameOverScreen .u.> GameAdvanceListener
  LevelViewer -d->"*" Drawable
  DrawablePlayer -u-|> Drawable
  DrawableEnemy -u-|> Drawable
  DrawableBarrier -u-|> Drawable
  DrawableSpike -u-|> Drawable
  DrawableBouncePad -u-|> Drawable
  DrawableCoin -u-|> Drawable
  DrawableEnemySpawner -u-|> Drawable
}
Drawable -l-> data.ImageReader
DrawablePlayer -d-> domain.Player
DrawableEnemy -d-> domain.Enemy
DrawableBarrier -d-> domain.Barrier
DrawableSpike -d-> domain.Spike
DrawableBouncePad -d-> domain.BouncePad
DrawableCoin -d-> domain.Coin
DrawableEnemySpawner -d-> domain.EnemySpawner

package domain {
  class Level
  abstract GameObject
  class Player
  class Enemy
  class Barrier
  class Spike
  class BouncePad
  class Coin
  class EnemySpawner

  Level -d->"*" GameObject
  Player -u-|> GameObject
  Enemy -u-|> GameObject
  Barrier -u-|> GameObject
  Spike -u-|> GameObject
  BouncePad -u-|> GameObject
  Coin -u-|> GameObject
  EnemySpawner -u-|> GameObject
}
Level -u-> data.LevelReader
Level -u-> data.LevelWriter

package data {
  interface FileReader {
    + read(): String
  }
  interface FileWriter {
    + write(data: String): void
  }
  class LevelReader
  class ImageReader
  class LevelWriter

  LevelReader .u.|> FileReader
  ImageReader .u.|> FileReader
  LevelWriter .u.|> FileWriter
}
@enduml