@startuml ArcadeGame
package presentation {
  class GameViewer {
    + {static} main(args: String[]): void
  }
  class GameAdvanceListener {
    - {static} {final} NUM_TICKS: int
    + nextTick(): void
  }
  class StartScreen {
    - {static} {final} LEVEL_FILES_LOCATION: String
    - handleStartGame(): void
    - handleDisplayControls(): void
    + draw(): void
  }
  class GameOverScreen {
    - handleQuitGame(): void
    - handleRestartGame(): void
    + draw(): void
  }
  class GameWonScreen {
    - handleQuitGame(): void
    - handleRestartGame(): void
    + draw(): void
  }
  class LevelViewer {
    - level: Level
    - gameObjects: List<Drawable>
    + LevelViewer(level: Level)
    - nextLevel(): void
    - handleGameWon(): void
    - handleGameLost(): void
    + draw(): void
  }
  abstract Drawable {
    # image: ImageReader
    + draw(): void
    # handleCollision(other: Drawable): void
  }
  class DrawablePlayer {
    - player: Player
    + draw(): void
    ~ moveLeft(): void
    ~ moveRight(): void
    ~ jump(): void
  }
  class DrawableEnemy {
    - enemy: Enemy
    + draw(): void
  }
  class DrawableBarrier {
    - barrier: Barrier
    + draw(): void
  }
  class DrawableSpike {
    - spike: Spike
    - direction: int
    + draw(): void
  }
  class DrawableBouncePad {
    - bouncePad: BouncePad
    + draw(): void
  }
  class DrawableCoin {
    - coin: Coin
    + draw(): void
  }
  class DrawableEnemySpawner {
    - enemySpawner: EnemySpawner
    + draw(): void
  }

  GameViewer .d.> StartScreen
  GameViewer .u.> GameAdvanceListener
  StartScreen -> LevelViewer
  StartScreen .u.> GameAdvanceListener
  LevelViewer .> GameWonScreen
  LevelViewer .> GameOverScreen
  LevelViewer .u.> GameAdvanceListener
  GameWonScreen .u.> GameAdvanceListener
  GameOverScreen .u.> GameAdvanceListener
  LevelViewer -d->"*" Drawable
  DrawablePlayer -u-|> Drawable
  DrawableEnemy -u-|> Drawable
  DrawableBarrier -u-|> Drawable
  DrawableSpike -u-|> Drawable
  DrawableBouncePad -u-|> Drawable
  DrawableCoin -u-|> Drawable
  DrawableEnemySpawner -u-|> Drawable
}
Drawable -l-> data.ImageReader
DrawablePlayer -d-> domain.Player
DrawableEnemy -d-> domain.Enemy
DrawableBarrier -d-> domain.Barrier
DrawableSpike -d-> domain.Spike
DrawableBouncePad -d-> domain.BouncePad
DrawableCoin -d-> domain.Coin
DrawableEnemySpawner -d-> domain.EnemySpawner
LevelViewer -u-> domain.Level

package domain {
  class Level {
    - reader: LevelReader
    - gameObjects: List<GameObject>
    - name: String
    - lives: int
    - score: int
    + Level(fileName: String)
    - load(): void
    + getObjects(): List<GameObject>
  }
  abstract GameObject {
    # xPos: int
    # yPos: int
    # xVel: int
    # yVel: int
    + GameObject(xPos: int, yPos: int)
    # getPosition(): int[]
    # setVelocity(xVel: int, yVel: int): void
    ~ collidesWith(other: GameObject): boolean
    ~ collisionAction(): void
  }
  class Player {
    + moveLeft(): void
    + moveRight(): void
    + jump(): void
    - loseLife(): void
  }
  class Enemy {
    ~ move(): void
  }
  class Barrier
  class Spike
  class BouncePad
  class Coin {
    ~ collect(): void
  }
  class EnemySpawner {
    - spawnRate: int
    ~ spawn(): void
  }

  Level -d->"*" GameObject
  Player -u-|> GameObject
  Enemy -u-|> GameObject
  Barrier -u-|> GameObject
  Spike -u-|> GameObject
  BouncePad -u-|> GameObject
  Coin -u-|> GameObject
  EnemySpawner -u-|> GameObject
}
Level -u-> data.LevelReader

package data {
  interface FileReader {
    + read(): String
  }
  class LevelReader {
    + read(): String
    - parseJson(): Object
  }
  class ImageReader {
    + read(): String
  }

  LevelReader .u.|> FileReader
  ImageReader .u.|> FileReader
}
@enduml